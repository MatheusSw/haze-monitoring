service: HazeMonitoring

provider:
  name: aws
  runtime: dotnet6
  apiGateway:
    request:
      schemas:
        post-temperature-create:
          name: PostTemperatureCreate
          schema: ${file(api_schema/temperature/post_temperature_create.json)}
        post-humidity-create:
          name: PostHumidityCreate
          schema: ${file(api_schema/temperature/post_humidity_create.json)}
  region: sa-east-1
package:
  individually: true
  patterns:
    - '!.idea/**'
    - '!.github/**'

functions:
  temperatureIndex:
    package:
      artifact: bin/release/net6.0/hazeMonitoring.zip
    handler: HazeMonitoring::HazeMonitoring.handlers.TemperatureHandler::Index
    url: true
    events:
      - http:
          path: clusters/{cluster-id}/temperatures
          method: get
          request:
            parameters:
              querystrings:
                total: false
              paths:
                cluster-id: true
  temperatureCreate:
    package:
      artifact: bin/release/net6.0/hazeMonitoring.zip
    handler: HazeMonitoring::HazeMonitoring.handlers.TemperatureHandler::Create
    url: true
    events:
      - http:
          path: clusters/{cluster-id}/temperatures
          method: post
          request:
            parameters:
              paths:
                cluster-id: true
            schemas:
              application/json: post-temperature-create
  humidityIndex:
    package:
      artifact: bin/release/net6.0/hazeMonitoring.zip
    handler: HazeMonitoring::HazeMonitoring.handlers.HumidityHandler::Index
    url: true
    events:
      - http:
          path: clusters/{cluster-id}/humidity
          method: get
          request:
            parameters:
              querystrings:
                total: false
              paths:
                cluster-id: true
  humidityCreate:
    package:
      artifact: bin/release/net6.0/hazeMonitoring.zip
    handler: HazeMonitoring::HazeMonitoring.handlers.HumidityHandler::Index
    url: true
    events:
      - http:
          path: clusters/{cluster-id}/humidity
          method: post
          request:
            parameters:
              paths:
                cluster-id: true
            schemas:
              application/json: post-humidity-create
resources: 
  Resources: 
    hazeMonitoringTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Sub 'haze-monitoring-${opt:stage, "development"}'
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST