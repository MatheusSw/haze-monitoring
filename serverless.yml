service: HazeMonitoring
custom:
  hazeMonitoringTableName: haze-monitoring-${opt:stage, "development"}-table
  hazeMeasurementsTopicName: haze-measurements-${opt:stage, "development"}-topic
provider:
  name: aws
  runtime: dotnet6
  logs:
    restApi:
      level: INFO
  apiGateway:
    request:
      schemas:
        post-measurements-create:
          name: PostMeasurementsCreate
          schema: ${file(api_schema/post_measurement_create.json)}
        post-plant-create:
          name: PostPlantCreate
          schema: ${file(api_schema/post_plant_create.json)}
        post-cluster-create:
          name: PostClusterCreate
          schema: ${file(api_schema/post_cluster_create.json)}

  region: sa-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
          Resource:
            - arn:aws:dynamodb:${opt:region, 'sa-east-1'}:*:table/${self:custom.hazeMonitoringTableName}*
        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - arn:aws:sns:${opt:region, 'sa-east-1'}:*:${self:custom.hazeMeasurementsTopicName}
package:
  individually: true
  patterns:
    - '!.idea/**'
    - '!.github/**'
    - '!volume/**'
    - '!node_modules/**'
    - 'package.json'
    - 'package-lock.json'
functions:
  measurementsDispatcher:
    package:
      artifact: bin/release/net6.0/hazeMonitoring.zip
    handler: HazeMonitoring::HazeMonitoring.dispatchers.MeasurementDispatcher::Create
    environment:
      hazeMeasurementsTopicArn: !Ref hazeMeasurementsTopic
    url: true
    events:
      - http:
          path: clusters/{cluster-id}/measurements
          method: post
          request:
            parameters:
              paths:
                cluster-id: true
            schemas:
              application/json: post-measurements-create
  measurementsHandler:
    package:
      artifact: bin/release/net6.0/hazeMonitoring.zip
    handler: HazeMonitoring::HazeMonitoring.handlers.MeasurementsHandler::Handle
    environment:
      hazeMonitoringTableName: ${self:custom.hazeMonitoringTableName}
    events:
      - sns:
          arn: !Ref hazeMeasurementsTopic
          topicName: ${self:custom.hazeMeasurementsTopicName}
  plantsDispatcher:
    package:
      artifact: bin/release/net6.0/hazeMonitoring.zip
    handler: HazeMonitoring::HazeMonitoring.dispatchers.PlantsDispatcher::Create
    environment:
      hazeMonitoringTableName: ${self:custom.hazeMonitoringTableName}
    url: true
    events:
      - http:
          path: clusters/{cluster-id}/plants
          method: post
          request:
            parameters:
              paths:
                cluster-id: true
            schemas:
              application/json: post-plant-create
  clustersDispatcher:
    package:
      artifact: bin/release/net6.0/hazeMonitoring.zip
    handler: HazeMonitoring::HazeMonitoring.dispatchers.ClustersDispatcher::Create
    environment:
      hazeMonitoringTableName: ${self:custom.hazeMonitoringTableName}
    url: true
    events:
      - http:
          path: clusters
          method: post
          request:
            schemas:
              application/json: post-cluster-create
resources:
  Resources:
    hazeMonitoringTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.hazeMonitoringTableName}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    hazeMeasurementsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.hazeMeasurementsTopicName}